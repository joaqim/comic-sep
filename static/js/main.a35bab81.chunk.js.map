{"version":3,"sources":["EventComponent.js","App.js","serviceWorker.js","index.js"],"names":["EventComponent","props","_onTouchStart","bind","_onTouchMove","_onTouchEnd","state","swiped","_swipe","minDistance","e","touch","touches","length","this","setState","x","clientX","y","clientY","changedTouches","swiping","absX","Math","abs","absY","console","log","onSwiped","onSwipedRight","onSwipedLeft","onTouchStart","onTouchMove","onTouchEnd","children","React","Component","pages","App","index","useRef","useSprings","i","window","innerWidth","sc","display","set","api_root","useGesture","down","xDelta","delta","xDir","direction","distance","cancel","current","clamp","comic_name","useState","comics_json_LOCAL","comics_json","setComicsJson","comics_labels","setComicsLabels","comic_data","chapter_nr","setChapterNr","chapter_name","setChapterName","page_nr","setPageNr","source_arr","setSourceArr","hq_enabled","setHasHQ","setSwiped","useEffect","fetchComics","getComicsLabels","getComicData","labels","Object","entries","forEach","chapter","title","hq","count","value","label","setPage","a","fetch","encodeURI","response","json","keys","error","data","nr","val","s","String","pad","handlers","useSwipeable","warn","preventDefaultTouchmoveEvent","trackMouse","id","tapOrClick","event","type","alert","src","showLoader","animationDuration","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a35bab81.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class EventComponent extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this._onTouchStart = this._onTouchStart.bind(this);\n    this._onTouchMove = this._onTouchMove.bind(this);\n    this._onTouchEnd = this._onTouchEnd.bind(this);\n\n    this.state = { swiped: false };\n    this._swipe = {};\n    this.minDistance = 50;\n  }\n\n  _onTouchStart(e) {\n    const touch = e.touches[0];\n\t// If multiple touches? Ignore ?\n\tif (e.touches.length > 1) {\n\t\tthis._swipe = {}\n\t\tthis.setState({ swiped: false })\n\t\treturn\n\t}\n    this._swipe = { x: touch.clientX, y: touch.clientY };\n    this.setState({ swiped: false });\n  }\n\n  _onTouchMove(e) {\n    if (e.changedTouches && e.changedTouches.length) {\n      const touch = e.changedTouches[0];\n      this._swipe.swiping = true;\n    }\n  }\n\n  _onTouchEnd(e) {\n    const touch = e.changedTouches[0];\n    const absX = Math.abs(touch.clientX - this._swipe.x);\n    const absY = Math.abs(touch.clientY - this._swipe.y);\n    console.log(touch.clientX)\n    console.log(this._swipe.x)\n\n    // Don't swip if AbY is too high\n    if(this._swipe.swiping && absY > 80) {\n\tthis._swipe = {}\n\treturn\n\t}\n\n    if (this._swipe.swiping && absX > this.minDistance ) {\n      this.props.onSwiped(true);\n      this.setState({ swiped: true });\n      if(touch.clientX < this._swipe.x) {\n\t      // Swipe Right\n\t\tthis.props.onSwipedRight && this.props.onSwipedRight();\n      }\n      if(touch.clientX > this._swipe.x) {\n\t      // Swipe Left\n\t\tthis.props.onSwipedLeft && this.props.onSwipedLeft();\n\n      }\n    }\n    this._swipe = {};\n  }\n\n  render() {\n    return (\n      <div\n        onTouchStart={this._onTouchStart}\n        onTouchMove={this._onTouchMove}\n        onTouchEnd={this._onTouchEnd}>\n        { false ? `Component-${this.state.swiped ? 'swiped' : ''}` : null}\n\t{this.props.children}\n      </div>\n    );\n  }\n\n}\n","import { render } from 'react-dom'\nimport React, { useEffect, useState, Image, useRef} from 'react';\nimport { hot } from 'react-hot-loader';\nimport Img from 'react-image'\nimport ReactImageAppear from 'react-image-appear'\nimport './App.css';\n\n//import axios from 'axios'\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n\n//import { Swipeable, defineSwipe } from 'react-touch'\n\nimport clamp from 'lodash-es/clamp'\nimport { useSprings, animated } from 'react-spring'\nimport { useGesture } from 'react-with-gesture'\n//import './styles.css'\n\nimport tapOrClick from 'react-tap-or-click'\nimport { useSwipeable } from 'react-swipeable'\n\nimport comics_json_LOCAL from './comic.json'\n//var comics_json_LOCAL = NaN\nimport EventComponent from './EventComponent.js'\n\n//import { fetchJSON } from './utils/comicUtils.js'\n\n/*\ninterface Number {\n    pad: () => string;\n    str: () => string;\n}\n*/\n\nfunction pad(val) {\n    var s = String(val)\n    const size = 3;\n    while (s.length < (size || 2)) {s = \"0\" + s;}\n    return s;\n}\n\n/*\nNumber.prototype.pad = function() : string {\n    var s = String(this);\n    const size = 3;\n    while (s.length < (size || 2)) {s = \"0\" + s;}\n    return s;\n}\n\nNumber.prototype.str = function() : string {\n    return String(this)\n}\n*/\n\nconst pages = [\n    'https://images.pexels.com/photos/62689/pexels-photo-62689.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n    'https://images.pexels.com/photos/296878/pexels-photo-296878.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n    'https://images.pexels.com/photos/1509428/pexels-photo-1509428.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n    'https://images.pexels.com/photos/351265/pexels-photo-351265.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n    'https://images.pexels.com/photos/924675/pexels-photo-924675.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'\n]\n\nlet Viewpager = () => {\n    const index = useRef(0)\n\n    const [props, set] = useSprings(pages.length, i => ({ x: i * window.innerWidth, sc: 1, display: 'block' }))\n\n    const bind = useGesture(({ down, delta: [xDelta], direction: [xDir], distance, cancel }) => {\n        if (down && distance > window.innerWidth / 7)\n            cancel((index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, pages.length - 1)))\n        set(i => {\n            if (i < index.current - 1 || i > index.current + 1) return { display: 'none' }\n            const x = (i - index.current) * window.innerWidth + (down ? xDelta : 0)\n            const sc = down ? 1 - distance / window.innerWidth / 2 : 1\n            return { x, sc, display: 'block' }\n        })\n    })\n\n    return props.map(({ x, display, sc }, i) => (\n            <animated.div {...bind()} key={i} style={{ display, transform: x.interpolate(x => `translate3d(${x}px,0,0)`) }}>\n            <animated.div style={{ transform: sc.interpolate(s => `scale(${s})`), backgroundImage: `url(${pages[i]})` }} />\n            </animated.div>\n    ))\n}\n\nlet App = () => {\n\tconst index = useRef(0)\n\n    const [props, set] = useSprings(pages.length, i => ({ x: i * window.innerWidth, sc: 1, display: 'block' }))\n    const bind = useGesture(({ down, delta: [xDelta], direction: [xDir], distance, cancel }) => {\n        if (down && distance > window.innerWidth / 7)\n            cancel((index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, pages.length - 1)))\n        set(i => {\n            if (i < index.current - 1 || i > index.current + 1) return { display: 'none' }\n            const x = (i - index.current) * window.innerWidth + (down ? xDelta : 0)\n            const sc = down ? 1 - distance / window.innerWidth / 2 : 1\n            return { x, sc, display: 'block' }\n        })\n    })\n\n    const api_root = \"https://comic-editor.s3.eu-north-1.amazonaws.com\"\n    const comic_name = \"One Piece - Digital Colored Comics\"\n\n    const [comics_json, setComicsJson] = useState(comics_json_LOCAL)\n    const [comics_labels, setComicsLabels] = useState([])\n    const [comic_data, setComicData] = useState([])\n    const [comic_images, setComicImages] = useState([])\n\n    const [chapter_nr, setChapterNr] = useState(519)\n    const [chapter_name, setChapterName] = useState()\n    const [page_nr, setPageNr] = useState(1)\n    const [page_count, setPageCount] = useState(0)\n    const [source_arr, setSourceArr] = useState([])\n\n    const [hq_enabled, setHQEnabled] = useState(false)\n    const [has_hq, setHasHQ] = useState(false)\n\n    const [pages_data, setPagesData] = useState([])\n    const [swiped, setSwiped] = useState(false)\n\n    useEffect(() => {fetchComics(comics_json)}, [comics_json]);\n    useEffect(() => {getComicsLabels(comics_labels)}, [comics_json])\n    //useEffect(() => {getComicImages(comic_images)}, [comics_json, chapter_nr])\n    useEffect(() => {getComicData(comic_data)}, [comics_json, chapter_nr])\n\n\n    const getComicData = () => {\n        let comic_data = comics_json[comic_name]\n    }\n\n    /*\n    const getComicImages = () => {\n        let images = []\n        images[0] = {index: 0, label: \"Empty\", source: null}\n        setComicImages(images)\n    }*/\n\n    const getComicsLabels = () => {\n        let labels = [];\n\t//let count = 0\n        Object.entries(comics_json[comic_name]).forEach(function(chapter, index) {\n            let title = chapter[1]['t']\n            let hq =    (chapter[1]['h'] === \"true\") ? true : false\n            let count = chapter[1]['c']\n\n            labels[index] = { value: index, label: title, hq: hq , count: count}\n        })\n        setComicsLabels(labels)\n        setPage(labels[chapter_nr], 1)\n\t//setPageCount(count)\n    }\n\n    const fetchComics = async () => {\n        if(comics_json) return;\n        try {\n            const response = await fetch(encodeURI(`${api_root}/${comic_name}/comic.json`))\n            let json = await response.json()\n            let labels = []\n            Object.keys(json).forEach(function(index) {labels[index] = json[index]})\n            setComicsJson(json);\n        } catch(error) {\n            console.error(error)\n        }\n    };\n\n    const handleClick = (event) => {\n\t//console.log(event);\n        if(event.type === \"mouseclick\") {\n            alert(event)\n        }\n    }\n\n    const setPage = (data, nr) => {\n\tconsole.log(data)\n        setPageNr(nr)\n        setChapterName(data.label)\n\tsetChapterNr(data.value)\n        setHasHQ(data.hq)\n        setSourceArr(encodeURI(`${api_root}/${comic_name}/${data.label}${data.hq && hq_enabled?\"/hq/\":\"/\"}${pad(nr)}.png`))\n    }\n\n    const nextPage = () => {\n\tconsole.log(\"Next Page\")\n\tif(page_nr+1 >= comics_labels[chapter_nr].count) {\n\t\tsetPage(comics_labels[chapter_nr+1], 1)\n\t} else {\n\t\tsetPage(comics_labels[chapter_nr], page_nr+1)\n\t}\n\t//setPage(comics_labels[chapter_nr], page_nr+1)\n\t//setPageNr(page_nr+1)\n\n\t//setSwiped(false)\n    }\n    const prevPage = () => {\n\tconsole.log(\"Prev Page\")\n\tif (page_nr-1 <= 0) {\n\t\tsetPage(comics_labels[chapter_nr-1], comics_labels[chapter_nr-1].count-1)\n\t} else {\n\t\tsetPage(comics_labels[chapter_nr], page_nr-1)\n\t}\n\t//setPage(comics_labels[chapter_nr], page_nr+1)\n\n\t//setPage(comics_labels[chapter_nr], page_nr-1)\n\t//setSwiped(false)\n    }\n\n    /*\n    return props.map(({ x, display, sc }, i) => (\n            <animated.div {...bind()} key={i} style={{ display, transform: x.interpolate(x => `translate3d(${x}px,0,0)`) }}>\n            <animated.div style={{ transform: sc.interpolate(s => `scale(${s})`), backgroundImage: `url(${pages[i]})` }} />\n            </animated.div>\n    ))\n    */\n\n    const handlers = useSwipeable({\n        onSwipedLeft: () => console.warn(\"Alternative swipe Left\"),\n        onSwipedRight: () => console.warn(\"Alternative swipe Right\"),\n        preventDefaultTouchmoveEvent: true,\n        trackMouse: true\n    })\n\n    return (\n        <>\n        {comics_labels && false ? <Dropdown options={comics_labels} onChange={setPage} value={comics_labels[chapter_nr]} placeholder=\"Select an option\" /> : null}\n        {\n              //comic_images ? <Dropdown options={comic_images} onChange={setPage} value={comic_images[page_nr]} placeholder=\"Select an option\" /> : null\n        }\n        {\n            chapter_name ?\n\t\t<EventComponent onSwiped={setSwiped} onSwipedLeft={nextPage} onSwipedRight={prevPage}>\n                <div id=\"img-box\" {...tapOrClick(handleClick)}>\n\n{ false ?\n<>\n\t<b>{`${swiped?'Swiped':'Not Swiped'}`}</b>\n\t<b>{`${page_nr}`}</b>\n</>\n: null}\n\t\t{false ?\n                <ReactImageAppear id=\"img-background\" {...handlers}\n            src={encodeURI(`${api_root}/${comic_name}/${chapter_name}${has_hq && hq_enabled?\"/hq/\":\"/\"}${pad(page_nr)}.png?${new Date().getTime()}`)} placeholder={encodeURI(`${api_root}/${comic_name}/${chapter_name}/${pad(page_nr)}.png`)} showLoader={false} animationDuration={'0'}/>\n: null}\n                <img\n\t\t id=\"img-background\"\n\t\tsrc={source_arr}\n\t\t{...handlers} showLoader={false} animationDuration={'0'}/>\n\n</div>\n</EventComponent>\n                        : null\n        }\n            { false ? <button onClick={nextPage}>Next</button> : null}\n\n        </>\n    )\n}\n\n                    //<animated.div style={{ transform: sc.interpolate(s => `scale(${s})`), backgroundImage: `url(${pages[i]})` }} />\nexport default hot(module)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//serviceWorker.unregister();\n"],"sourceRoot":""}